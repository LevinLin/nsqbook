特性 & 保证
===========
NSQ是一个实时的分布式消息平台。

特性
-----------------------
* 支持分布式拓扑结构，没有单点失效(no SPOF)
* 横向拓展（没有brokers, 无缝地往集群里添加更多节点）
* 消息传输，基于发布/订阅的推模式, 延时小 (性能)
* 结合负载平衡和组播方式的消息路由
* 同时擅长于流（高流量）与工作导向（低流量）工作负载
* 主要是在内存中（超过上限的消息将被透明地保存在磁盘上）
* 运行发现服务，消费者找到生产者 (nsqlookupd)
* 传输层安全协议（TLS）
* 数据格式无关
* 没有依赖（易于部署），附有一个健全的，限定的默认配置
* 支持任何语言客户端库的简单TCP协议
* HTTP接口进行统计，管理操作和生产（无需客户端）
* 集成了statsd用于实时监控
* 强大的集群管理界面


保证
----------
正如任何分布式系统，达成你的目标需要权衡。透过高透明度有关这些权衡，我们希望设置NSQ在生产环境部署的的预期行为。

消息不进行持久化(默认)
^^^^^^^^^^^^^^^^^^^^^^
虽然该系统支持超过"阈值"（--mem-queue-size）的值之后，信息将被透明地保存在磁盘上，
但它主要是一个内存中的消息传递平台。

--mem-queue-size值可以设置为0，以确保所有传入的消息被保存到磁盘上。
在这种情况下，如果一个节点失败，则很容易减小遭受的损失（即没操作系统或底层IO子系统失败）

没有内置的复制。但是，也有各种折衷的方式。例如配置从节点，把topics持久化到硬盘上。

消息至少传递一次
^^^^^^^^^^^^^^^^^^^
与上述密切相关的是，这里假设给定nsqd节点不会失败。

这意味着，由于各种原因，消息可能会被传送多次（客户端超时，断线，对其重新排队，等等）。
客户端承担起履行幂等操作或重复数据删除的责任。

消息的接收是无序的
^^^^^^^^^^^^^^^^^^^^^
你不能依赖于消息传递到消费者的顺序。

类似的消息传递语义，这是对其重新排队的结果，结合了内存和磁盘上的存储，每个nsqd节点间不共享任何内容。

这里有一个比较简单的实现松散的顺序（即对于一个给定的消费者它的消息是有序的，但不是以整个集群作为一个整体）
通过引入一个延迟窗口，在您的消费者接受信息，并在处理之前排序（虽然，为了保持顺序不变必须抛弃在窗口之外的消息）


消费者寻找所有topic的生产者
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
nsqlookupd被设计为一致。nsqlookupd节点并不需要互相协调来保持状态或回复查询。

网络分区不影响可用性，分区双方仍然可以回复查询。部署拓扑结构能在很大程度减轻这类问题。
